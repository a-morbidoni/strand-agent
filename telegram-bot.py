"""
Bot de Telegram para procesar recibos autom√°ticamente.

Este archivo contiene toda la l√≥gica del bot de Telegram que escucha mensajes,
procesa im√°genes de recibos y guarda los datos extra√≠dos.
"""

import os
import asyncio
import logging
from datetime import datetime
from telegram import Update
from telegram.ext import Application, MessageHandler, filters, ContextTypes
import subprocess
from dotenv import load_dotenv

# Cargar variables de entorno
load_dotenv()

# Configurar logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler('telegram_bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class TelegramBot:
    """
    Bot de Telegram para recibir im√°genes de recibos y procesarlas autom√°ticamente.
    """
    
    def __init__(self, token: str):
        self.token = token
        self.app = Application.builder().token(token).build()
        
        # Configurar handlers
        self.app.add_handler(MessageHandler(filters.PHOTO, self.handle_photo))
        self.app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_text))
        self.app.add_handler(MessageHandler(filters.Document.ALL, self.handle_document))
        
    async def handle_photo(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        Maneja las fotos recibidas en el chat.
        """
        user = update.effective_user
        chat_id = update.effective_chat.id
        
        logger.info(f"Foto recibida de {user.username} ({user.id}) en chat {chat_id}")
        
        try:
            # Obtener la foto de mayor resoluci√≥n
            photo = update.message.photo[-1]
            
            # Descargar la foto
            file = await context.bot.get_file(photo.file_id)
            
            # Crear nombre √∫nico para el archivo
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"recibo_telegram_{timestamp}_{user.id}.jpg"
            file_path = os.path.join("docs/invoices", filename)
            
            # Crear directorio si no existe
            os.makedirs("docs/invoices", exist_ok=True)
            
            # Descargar archivo
            await file.download_to_drive(file_path)
            
            # Enviar mensaje de confirmaci√≥n
            await update.message.reply_text("üì∏ Imagen recibida! Procesando recibo...")
            
            logger.info(f"Imagen guardada en: {file_path}")
            
            # Llamar al orchestrator para procesar la imagen
            await update.message.reply_text("üîÑ Leyendo datos del recibo...")
            
            resultado = await self.llamar_orchestrator_async(file_path)
            
            if resultado:
                await update.message.reply_text(
                    f"‚úÖ Imagen procesada exitosamente!\n\n"
                    f"üìä Los datos han sido agregados a Google Sheets autom√°ticamente."
                )
            else:
                await update.message.reply_text(
                    "‚ùå Error procesando el recibo. "
                    "Revisa los logs para m√°s detalles."
                )
                
        except Exception as e:
            logger.error(f"Error procesando foto: {e}")
            await update.message.reply_text(
                f"‚ùå Error procesando la imagen: {str(e)}"
            )
    
    async def handle_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        Maneja los mensajes de texto recibidos.
        """
        user = update.effective_user
        chat_id = update.effective_chat.id
        text = update.message.text
        
        logger.info(f"Mensaje de texto de {user.username} ({user.id}): {text}")
        
        # Respuestas autom√°ticas
        if text.lower() in ['hola', 'hi', 'hello']:
            await update.message.reply_text(
                "¬°Hola! üëã\n\n"
                "Soy tu asistente de recibos. Env√≠ame una foto de tu recibo "
                "y yo extraer√© autom√°ticamente:\n"
                "üí∞ Total\n"
                "üìÖ Fecha\n"
                "üë§ Receptor\n\n"
                "üí≥ Cuenta Origen\n"
                "üîë Id Transaccion\n"
                "¬°Pru√©balo enviando una imagen!"
            )
        elif text.lower() in ['ayuda', 'help']:
            await update.message.reply_text(
                "ü§ñ **Comandos disponibles:**\n\n"
                "üì∏ Env√≠a una **foto** de tu recibo\n"
                "üìÑ Env√≠a un **documento** (imagen)\n"
                "üí¨ Escribe 'hola' para saludar\n"
                "‚ùì Escribe 'ayuda' para ver este mensaje\n"
                "üìä Escribe 'estado' para ver estad√≠sticas\n\n"
                "¬°Todo se procesa autom√°ticamente!"
            )
        elif text.lower() == 'estado':
            stats = await self.get_stats()
            await update.message.reply_text(stats)
        else:
            await update.message.reply_text(
                "üëã ¬°Hola! Para procesar un recibo, env√≠ame una foto del mismo.\n"
                "Escribe 'ayuda' si necesitas m√°s informaci√≥n."
            )
    
    async def handle_document(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        Maneja documentos/archivos recibidos.
        """
        user = update.effective_user
        document = update.message.document
        
        logger.info(f"Documento recibido de {user.username}: {document.file_name}")
        
        # Verificar si es una imagen
        if document.mime_type and document.mime_type.startswith('image/'):
            await self.handle_photo(update, context)
        else:
            await update.message.reply_text(
                "üìÑ Solo puedo procesar im√°genes de recibos.\n"
                "Por favor env√≠a una foto o imagen."
            )
    
    async def llamar_orchestrator_async(self, file_path: str):
        """
        Llama al orchestrator para procesar la imagen de forma as√≠ncrona.
        """
        try:
            # Ejecutar orchestrator en un hilo separado
            loop = asyncio.get_event_loop()
            resultado = await loop.run_in_executor(
                None,
                self._ejecutar_orchestrator,
                file_path
            )
            
            return resultado
                
        except Exception as e:
            logger.error(f"Error llamando al orchestrator: {e}")
            return False
    
    def _ejecutar_orchestrator(self, file_path: str):
        """
        Ejecuta el orchestrator de forma s√≠ncrona.
        """
        try:
            # Llamar al orchestrator con la imagen espec√≠fica usando el Python del entorno virtual
            venv_python = os.path.join(os.getcwd(), "venv", "Scripts", "python.exe")
            result = subprocess.run([
                venv_python, "orchestrator.py", "--imagen", file_path
            ], capture_output=True, text=True, timeout=120, encoding='utf-8')
            
            if result.returncode == 0:
                logger.info(f"Orchestrator ejecutado exitosamente para: {file_path}")
                logger.info(f"Output: {result.stdout}")
                return True
            else:
                logger.error(f"Error en orchestrator - Return code: {result.returncode}")
                logger.error(f"Stderr: {result.stderr}")
                logger.error(f"Stdout: {result.stdout}")
                return False
                
        except subprocess.TimeoutExpired:
            logger.error("Timeout ejecutando orchestrator")
            return False
        except Exception as e:
            logger.error(f"Error ejecutando orchestrator: {e}")
            return False
    
    async def get_stats(self):
        """
        Obtiene estad√≠sticas del sistema.
        """
        try:
            # Contar im√°genes en la carpeta
            import glob
            extensiones = ['*.jpg', '*.jpeg', '*.png', '*.bmp', '*.tiff', '*.webp']
            imagenes = []
            for ext in extensiones:
                imagenes.extend(glob.glob(os.path.join("docs/invoices", ext)))
            
            # Leer JSON para obtener registros
            if os.path.exists("docs/invoices/invoices.json"):
                import json
                with open("docs/invoices/invoices.json", 'r', encoding='utf-8') as f:
                    invoices_data = json.load(f)
                total_registros = len(invoices_data) if invoices_data else 0
            else:
                total_registros = 0
            
            stats = (
                "üìä **Estad√≠sticas del Sistema**\n\n"
                f"üñºÔ∏è Im√°genes en carpeta: {len(imagenes)}\n"
                f"üìÑ Registros en JSON: {total_registros}\n"
                f"üïí √öltima actualizaci√≥n: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}"
            )
            
            return stats
            
        except Exception as e:
            return f"‚ùå Error obteniendo estad√≠sticas: {e}"
    
    async def start_bot(self):
        """
        Inicia el bot de Telegram.
        """
        logger.info("Iniciando bot de Telegram...")
        await self.app.initialize()
        await self.app.start()
        await self.app.updater.start_polling()
        
        logger.info("Bot de Telegram iniciado. Escuchando mensajes...")
        
        try:
            # Mantener el bot ejecut√°ndose
            await asyncio.Future()  # Run forever
        except KeyboardInterrupt:
            logger.info("Deteniendo bot...")
        finally:
            await self.app.updater.stop()
            await self.app.stop()
            await self.app.shutdown()

async def run_telegram_bot(token: str):
    """
    Funci√≥n principal para ejecutar el bot de Telegram.
    
    Args:
        token: Token del bot de Telegram
    """
    bot = TelegramBot(token)
    
    print("ü§ñ INICIANDO BOT DE TELEGRAM")
    print("=" * 40)
    print("üì± El bot est√° escuchando mensajes...")
    print("üì∏ Env√≠a fotos de recibos para procesarlos autom√°ticamente")
    print("üí¨ Escribe 'ayuda' para ver comandos disponibles")
    print("üõë Presiona Ctrl+C para detener")
    print()
    
    await bot.start_bot()

# Configuraci√≥n del bot - Token desde variable de entorno
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

if __name__ == "__main__":
    import sys
    
    # Priorizar token desde l√≠nea de comandos, sino usar el del archivo
    if len(sys.argv) >= 2:
        token = sys.argv[1]
        print(f"üîë Usando token desde l√≠nea de comandos")
    else:
        token = BOT_TOKEN
        if not token:
            print("‚ùå Error: Token no configurado")
            print()
            print("Opciones para configurar el token:")
            print("1. Crea un archivo .env con TELEGRAM_BOT_TOKEN=tu_token")
            print("2. Ejecuta: python telegram-bot.py TU_BOT_TOKEN")
            print()
            print("Para obtener un token:")
            print("1. Busca @BotFather en Telegram")
            print("2. Env√≠a /newbot")
            print("3. Sigue las instrucciones")
            print("4. Copia el token que te proporciona")
            print("5. Agr√©galo al archivo .env")
            sys.exit(1)
        else:
            print(f"üîë Usando token desde variable de entorno")
    
    try:
        asyncio.run(run_telegram_bot(token))
    except KeyboardInterrupt:
        print("\nüõë Bot de Telegram detenido")
        sys.exit(0)
